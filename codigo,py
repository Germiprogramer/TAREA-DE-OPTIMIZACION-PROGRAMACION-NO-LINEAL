import cvxpy as cp
import numpy as np

# Datos históricos para cada canal (Google Ads, Facebook Ads, Twitter Ads) en la Universidad UAX
historical_investments = np.array([[40000, 30000, 30000]])  # Inversiones en Google Ads, Facebook Ads, Twitter Ads
historical_conversions = np.array([[80, 60, 50]])  # Conversiones atribuibles a cada canal

# Parámetros de las curvas de respuesta (asumiendo valores similares a los del problema original)
alphas = np.array([-9453.72, -8312.84, -7371.33])
betas = np.array([8256.21, 7764.20, 7953.36])

# Presupuesto total disponible
total_budget = 100000

# Variables de decisión (presupuesto asignado a cada canal para la Universidad UAX)
google_budget = cp.Variable(pos=True)
facebook_budget = cp.Variable(pos=True)
twitter_budget = cp.Variable(pos=True)

# Restricción de presupuesto total
budget_constraint = [google_budget + facebook_budget + twitter_budget <= total_budget]

# Función objetivo: Maximizar el ROI para la Universidad UAX
roi = (
    (alphas[0] + betas[0] * cp.log(google_budget)) * historical_conversions[0, 0] +
    (alphas[1] + betas[1] * cp.log(facebook_budget)) * historical_conversions[0, 1] +
    (alphas[2] + betas[2] * cp.log(twitter_budget)) * historical_conversions[0, 2]
)
objective = cp.Maximize(roi)

# Crear el problema de optimización
problem = cp.Problem(objective, budget_constraint)

# Resolver el problema
problem.solve(solver=cp.ECOS)

# Resultados
if problem.status == cp.OPTIMAL:
    optimal_google_budget = google_budget.value
    optimal_facebook_budget = facebook_budget.value
    optimal_twitter_budget = twitter_budget.value
    optimal_roi = roi.value
    print("Presupuesto Óptimo para la Universidad UAX:")
    print(f"Google Ads: ${optimal_google_budget:.2f}")
    print(f"Facebook Ads: ${optimal_facebook_budget:.2f}")
    print(f"Twitter Ads: ${optimal_twitter_budget:.2f}")
    print(f"ROI Óptimo: {optimal_roi:.2f}")
else:
    print("No se pudo encontrar una solución óptima para la Universidad UAX.")
